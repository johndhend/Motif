#) Client window will contain the following items: 
!)   a label "Resize Drawn Button", with arrowButtons on both sides;
   a square Box;
   two toggle buttons, "Resize Child" and "Resize Parent".
C)
!) This is a test of the resize callback.
#) Five messages about resize callback should appear in the xterm window.
   The messages are numbered to help you keep track of them.
#) The toggles at the bottom let you choose between resizing the Parent of
   the Drawing Area -- a form -- and one of its children, the Drawn button.
   In this test, the Drawn button appears as a square box.
#) There are two modes in which this test can be run. If you are running
   in "BBParent" mode (run with -u xmBulletinBoardWidgetClass
   or no user data specified), then
   the Resize Parent Toggle is set insensitive, and you should just continue
   past those instruction panels which discuss testing with that toggle
   set ON.
#) The UP arrow will INCREASE the size of the parent or child (depending on
   which toggle is set). The DOWN arrow will DECREASE the size.
C)
#) Increase the child size several times. It should not force the Drawing
   Area to resize until its right edge has to move beyond the right edge of
   the rightmost arrow button.
#) Once you reach the edge of the drawing area, each increase in the size of
   the child should result in visible resizing and another resize callback
   message.
#) Decrease the size of the child several times. At some point, the Drawing
   Area will stop growing smaller. At this point, no more resize callback
   messages should appear as you decrease the child's size. 
#) Decrease the
   child to the minimum possible size, then increase it until it is visible.
C) 
#) Use the toggle to switch to resizing the Drawing Area's parent. If
the Resize Parent Toggle is insensitive, just Continue.
#) Increase the parent several times. EACH increase should produce a resize
callback message.
#) Decrease the parent to the minimum possible. To do this, put the focus on
the DECREASE arrow button and press the space bar repeatedly (if you use the
mouse, at some point the window will be to small for you to click on the 
DECREASE arrow button.) Each decrease should also produce a resize callback
message.
#) Resize the window by grabbing the resize border and increasing it. Another
resize callback message should appear and the children should become visible
again.
C)

#) By clicking on arrow buttons, you will instead MOVE the child. The "Resize
Parent" toggle is no longer useful. Use the UP arrow to move the drawn button
until it forces the client to resize. Again, you should see resize callback
messages each time the client appears to resize.
C)

#) The Parent toggle was unmanaged and remanaged. There should be
   only TWO messages about an expose event having been generated. 
#) Note: You can also compile this test with -DBESTCASE, and you may see fewer
   expose events being generated.
C)

#) The Drawing Area was unmanaged, followed by its other children. One
additional expose event message should be generated.
C)

#) Press on the push button labelled Push Me. Each time you press it
the box above, which is a drawn button, show grow 20 pixels wider.

C)

#) The drawing area should now contain an arrow button.  The size
 of the drawing area should be approximately 520x620. 

C)

#) A drawing Area has been created with resizePolicyGrow.  It should
  contain an arrow button placed at (100,100).
C)

#) The arrow button has been moved to (50, 200).  The drawing area
  should grow in the y direction, but remain the same in the x
direction, giving a size of  approximately (160, 260).

C)

#) Another drawing area should appear with an arrow button at (50,50).
 The size of the drawing area should be approximately (300,300).

C)

#) Resize the window.
#) The arrow button position will revert to 0,0.
#) The arrow button child should resize itself
so that it always fills the window.
#) You may repeat the resize several times.

C)


E)
