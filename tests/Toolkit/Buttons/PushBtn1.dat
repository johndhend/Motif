/* 
 *  @OPENGROUP_COPYRIGHT@
 *  COPYRIGHT NOTICE
 *  Copyright (c) 1990, 1991, 1992, 1993 Open Software Foundation, Inc.
 *  Copyright (c) 1996, 1997, 1998, 1999, 2000 The Open Group
 *  ALL RIGHTS RESERVED (MOTIF). See the file named COPYRIGHT.MOTIF for
 *  the full copyright text.
 *  
 *  This software is subject to an open license. It may only be
 *  used on, with or for operating systems which are themselves open
 *  source systems. You must contact The Open Group for a license
 *  allowing distribution and sublicensing of this software on, with,
 *  or for operating systems which are not Open Source programs.
 *  
 *  See http://www.opengroup.org/openmotif/license for full
 *  details of the license agreement. Any use, reproduction, or
 *  distribution of the program constitutes recipient's acceptance of
 *  this agreement.
 *  
 *  EXCEPT AS EXPRESSLY SET FORTH IN THIS AGREEMENT, THE PROGRAM IS
 *  PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, EITHER EXPRESS OR IMPLIED INCLUDING, WITHOUT LIMITATION, ANY
 *  WARRANTIES OR CONDITIONS OF TITLE, NON-INFRINGEMENT, MERCHANTABILITY
 *  OR FITNESS FOR A PARTICULAR PURPOSE
 *  
 *  EXCEPT AS EXPRESSLY SET FORTH IN THIS AGREEMENT, NEITHER RECIPIENT
 *  NOR ANY CONTRIBUTORS SHALL HAVE ANY LIABILITY FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 *  DAMAGES (INCLUDING WITHOUT LIMITATION LOST PROFITS), HOWEVER CAUSED
 *  AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 *  ANY WAY OUT OF THE USE OR DISTRIBUTION OF THE PROGRAM OR THE
 *  EXERCISE OF ANY RIGHTS GRANTED HEREUNDER, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGES.
*/ 
/* 
 * HISTORY
*/ 
/*
static char rcsid[] = "$XConsortium: PushBtn1.dat /main/6 1995/07/13 17:30:21 drk $"
*/

#) A pushbutton labeled 'PushButton1' should appear. It should be
   the default blue color with a 2 pixel white border around the
   pushbutton. 
#) Press and hold MB1 in pushbutton, it should have the white highlight
   border filled with your highlight color and the pushbutton should
   appear to be pressed in. 
#) Release MB1 - 'PushButton1' should appear popped out. 
#) Iconify and Normalize the client window. 
#) Arm the pushbutton (press and hold MB1 on pushbutton).
   'PushButton1' should appear to be pressed in. 
#) Move the pointer out of the client window.
   'PushButton1' should appear to be popped out. 
#) Move the pointer into client window.
   'PushButton1' should appear to be pressed in. 
#) Move the pointer out of the client window.
   'PushButton1' should appear to be popped out. 
#) Disarm the pushbutton (release MB1 outside of window). 
C)
#) The client window should be smaller.	
#) Resize and move the client window. The pushbutton should have a highlight
   area of 20 pixels, white when the widget does not have focus, highlight color when it does. 
#) Arm 'PushButton1'. The pushbutton background color should change to yellow.
   \"PushButton1 Armed\" should appear in the term window as well as the event type. 
#) Release MB1. Colors should revert back.
   \"Event is 5\" and \"Pushbutton Disarmed\" should appear in the term window. 
#) Press and hold MB1 on 'PushButton1'. The background color should change to yellow./n   'Pushbutton Armed' should appear in the term window. 
#) Move out of the client window. Colors should revert back.
   Release MB1. \"PushButton1 Disarmed\" should appear in term window. 
#) Move the client 
window so it partially obscures the term window. 
#) Raise the term window.  Raise the client window. 
#) With pointer in client window, press Space key to activate.
   For each, messages \"Pushbutton armed\", \"Event is 2\", and \"PushButton
   Disarmed\" should appear and the button looks pressed and released. 
#) With the focus in the client window, wiggle the mouse and press Space *many*
   times.  The event type printed in the term window should be consistent.
C)

#) A mountain should appear.
#) Arm 'PushButton1'. An image of GNU should appear. 
#) Release 'PushButton1'. An image of the mountain should appear. 

C)

#) Two push buttons should appear in a drawing area with highlight 
   thickness = 7.  The background of the drawing area has a pixmap.
   Press and release on each push button.  The pixmap should appear
   correctly around the highlight area of each push button.
C)
#) The next few panels are testing changing colors via XmChangeColor.

#) Both the pushbuttons should have a shadowThickness of 10.

#) Both the pushbuttons should have a background of RED color now. And
   the shadow colors and highlight colors should change automatically
   to make them visible.

C)
#) Both the pushbuttons should have a background of GREEN color now. And
   the shadow colors and highlight colors should change automatically
   to make them visible.

C)
#) Both the pushbuttons should have a background of BLUE color now. And
   the shadow colors and highlight colors should change automatically
   to make them visible.

C)
#) Both the pushbuttons should have a background of YELLOW color now. And
   the shadow colors and highlight colors should change automatically
   to make them visible.

C)
#) Both the pushbuttons should have a background of PINK color now. And
   the shadow colors and highlight colors should change automatically
   to make them visible.

E)
