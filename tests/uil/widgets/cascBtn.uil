! 
! @OPENGROUP_COPYRIGHT@
! COPYRIGHT NOTICE
! Copyright (c) 1990, 1991, 1992, 1993 Open Software Foundation, Inc.
! Copyright (c) 1996, 1997, 1998, 1999, 2000 The Open Group
! ALL RIGHTS RESERVED (MOTIF). See the file named COPYRIGHT.MOTIF for
! the full copyright text.
! 
! This software is subject to an open license. It may only be
! used on, with or for operating systems which are themselves open
! source systems. You must contact The Open Group for a license
! allowing distribution and sublicensing of this software on, with,
! or for operating systems which are not Open Source programs.
! 
! See http://www.opengroup.org/openmotif/license for full
! details of the license agreement. Any use, reproduction, or
! distribution of the program constitutes recipient's acceptance of
! this agreement.
! 
! EXCEPT AS EXPRESSLY SET FORTH IN THIS AGREEMENT, THE PROGRAM IS
! PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
! KIND, EITHER EXPRESS OR IMPLIED INCLUDING, WITHOUT LIMITATION, ANY
! WARRANTIES OR CONDITIONS OF TITLE, NON-INFRINGEMENT, MERCHANTABILITY
! OR FITNESS FOR A PARTICULAR PURPOSE
! 
! EXCEPT AS EXPRESSLY SET FORTH IN THIS AGREEMENT, NEITHER RECIPIENT
! NOR ANY CONTRIBUTORS SHALL HAVE ANY LIABILITY FOR ANY DIRECT,
! INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
! DAMAGES (INCLUDING WITHOUT LIMITATION LOST PROFITS), HOWEVER CAUSED
! AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
! LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
! ANY WAY OUT OF THE USE OR DISTRIBUTION OF THE PROGRAM OR THE
! EXERCISE OF ANY RIGHTS GRANTED HEREUNDER, EVEN IF ADVISED OF THE
! POSSIBILITY OF SUCH DAMAGES.
! 
! 
! HISTORY
! 
!   $XConsortium: cascBtn.uil /main/9 1995/07/13 20:43:43 drk $
!******************************************************************************
module Test
        version = 'v1.0'
        names = case_sensitive

  include file "cascBtn.msg";
  
  procedure
          exit_test();
	  Report_Callback(string);

  value
	  wheat			     : color('wheat');
	  navy			     : color('navy');

  object                                  ! The main window widget.
          S_MAIN_WIDGET : XmBulletinBoard {
  
              arguments {
                  XmNx = 0;
                  XmNy = 0;
              };
    	      controls {
                  XmBulletinBoardDialog 	explanation;
                  XmMenuBar			menuBar;
    	      };
          };

  value
        brown: color ('brown');
        navy_blue: color ('navy blue');

  object
	menuBar :  XmMenuBar {
	    controls {
		XmCascadeButton 	CascadeButton1;
	    };
	};

  object
        CascadeButton1 :  XmCascadeButton {
	    arguments {
                XmNwidth = 100;
                XmNheight =  50;
		XmNborderColor = brown;
                XmNborderWidth =  2;
                XmNrecomputeSize =  false;
                XmNmappingDelay =  10;
            };
	    controls {
		XmPulldownMenu	PullDown1;
 	    };
        };

  object
	PullDown1 :	XmPulldownMenu {
	    controls {
		XmPushButton		Push_button1;
		XmCascadeButton 	CascadeButton2;
	    };
	};
		
  object
        CascadeButton2 :  XmCascadeButton gadget {
	    arguments {
                XmNborderWidth =  2;
                XmNmappingDelay =  10;
            };
	    controls {
		XmPulldownMenu	PullDown2;
	    };
        };

  object
	PullDown2 :	XmPulldownMenu {
	    controls {
		XmPushButton Push_button2;
	    };
	};

  object
	Push_button1:  XmPushButton	{
	    arguments {
		XmNlabelString = compound_string("Save");
		! For backward compatability, user must be able
		! to specify a mnemonic as a integer in 1.1
		XmNmnemonic = 83;   
		XmNaccelerator = "Ctrl<Key>s";
		XmNacceleratorText = compound_string("<Ctrl>S");
	    };
	    callbacks {
			XmNactivateCallback = procedure Report_Callback
                                        ('Save button activateCallback');
	    };
	};

  object
	Push_button2:  XmPushButton	{
	    arguments {
		XmNmnemonic = keysym("Q");
		XmNlabelString = compound_string("Quit");
		XmNaccelerator = "Ctrl<Key>q";
		XmNacceleratorText = compound_string("<Ctrl>Q");
	    };
	    callbacks {
			XmNactivateCallback = procedure Report_Callback
                                        ('Quit button activateCallback');
	    };
	};
!/****************************************************************************/

object
	explanation : XmBulletinBoardDialog {
			arguments { 
				  XmNx = 500;
				  XmNy  = 0;
				  XmNdefaultPosition = false;
				  XmNbackground = wheat;
				  XmNforeground = navy;
				  };
			controls  {
				  XmPushButton	pushb1;
      				  XmLabel	        label1;
				  XmText		text1;
			    	  };
                 };

object
	pushb1 :	XmPushButton {
			arguments {
				  XmNx = 0;
				  XmNy = 0;
				  XmNbackground = wheat;
				  XmNforeground = navy;
			 	  XmNlabelString = compound_string("Exit");
				  };
			callbacks {
				  XmNarmCallback = procedure exit_test();
				  };
		};

object
	label1 : XmLabel {
			arguments {
				  XmNx = 60;
				  XmNy = 0;
				  XmNbackground = wheat;
				  XmNforeground = navy;
				  XmNlabelString = compound_string("Explanation of Widget Displayed");
				  };
		};
		

object
	text1 : XmText {
			arguments {
				  XmNx = 0;
				  XmNy = 40;  
				  XmNheight = 320;
				  XmNwidth = 300;
				  XmNwordWrap = true;
				  XmNeditMode = XmMULTI_LINE_EDIT;
				  XmNeditable = false;
				  XmNbackground = wheat;
				  XmNforeground = navy;
				  XmNvalue = message;
				  };
				   
		};
end module;
