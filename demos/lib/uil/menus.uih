! @OPENGROUP_COPYRIGHT@
! COPYRIGHT NOTICE
! Copyright (c) 1990, 1991, 1992, 1993 Open Software Foundation, Inc.
! Copyright (c) 1996, 1997, 1998, 1999, 2000 The Open Group
! ALL RIGHTS RESERVED (MOTIF).  See the file named COPYRIGHT.MOTIF for
! the full copyright text.
! 
! This software is subject to an open license. It may only be
! used on, with or for operating systems which are themselves open
! source systems. You must contact The Open Group for a license
! allowing distribution and sublicensing of this software on, with,
! or for operating systems which are not Open Source programs.
! 
! See http://www.opengroup.org/openmotif/license for full
! details of the license agreement. Any use, reproduction, or
! distribution of the program constitutes recipient's acceptance of
! this agreement.
! 
! EXCEPT AS EXPRESSLY SET FORTH IN THIS AGREEMENT, THE PROGRAM IS
! PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
! KIND, EITHER EXPRESS OR IMPLIED INCLUDING, WITHOUT LIMITATION, ANY
! WARRANTIES OR CONDITIONS OF TITLE, NON-INFRINGEMENT, MERCHANTABILITY
! OR FITNESS FOR A PARTICULAR PURPOSE
! 
! EXCEPT AS EXPRESSLY SET FORTH IN THIS AGREEMENT, NEITHER RECIPIENT
! NOR ANY CONTRIBUTORS SHALL HAVE ANY LIABILITY FOR ANY DIRECT,
! INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
! DAMAGES (INCLUDING WITHOUT LIMITATION LOST PROFITS), HOWEVER CAUSED
! AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
! LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
! ANY WAY OUT OF THE USE OR DISTRIBUTION OF THE PROGRAM OR THE
! EXERCISE OF ANY RIGHTS GRANTED HEREUNDER, EVEN IF ADVISED OF THE
! POSSIBILITY OF SUCH DAMAGES.
! 
! 
! HISTORY

include file 'menu_strings.uih';
include file 'menu_cbs.uih';

object fileButton: XmCascadeButton {
    arguments {
        XmNlabelString = fileString;
        XmNmnemonic = fileMnemonic;
    };
    controls {
        XmPulldownMenu fileMenu;
    };
};

object editButton: XmCascadeButton {
    arguments {
        XmNlabelString = editString;
        XmNmnemonic = editMnemonic; 
    };
    controls {
        XmPulldownMenu editMenu;
    };
};

object viewButton: XmCascadeButton {
    arguments {
        XmNlabelString = viewString;
        XmNmnemonic = viewMnemonic; 
    };
    controls {
        XmPulldownMenu viewMenu;
    };
};

object helpButton: XmCascadeButton {
    arguments {
        XmNlabelString = helpString;
        XmNmnemonic = helpMnemonic; 
    };
    controls {
        XmPulldownMenu helpMenu;
    };
};

object fileMenu: XmPulldownMenu {
    controls {
        XmPushButton newButton;
        XmPushButton openButton;
        XmPushButton saveButton;
        XmPushButton saveAsButton;
	   unmanaged XmPushButton revertButton;
        unmanaged XmSeparator  sep;
        unmanaged XmPushButton copyToButton;
        unmanaged XmPushButton moveToButton;
        unmanaged XmPushButton linkToButton;
	   unmanaged XmPushButton dragButton;
        XmSeparator sep;
        XmPushButton printButton;
        XmPushButton printSetupButton;
        XmSeparator  sep;
        XmPushButton closeButton;
        XmPushButton exitButton;
    };
};

object newButton: XmPushButton {
    arguments {
        XmNlabelString = newString;
        XmNmnemonic = newMnemonic; 
	XmNaccelerator = "Ctrl<Key>N";
	XmNacceleratorText = "Ctrl+N";
    };
    callbacks new_cbs;
};

object openButton: XmPushButton {
    arguments {
        XmNlabelString = openString;
        XmNmnemonic = openMnemonic;
	XmNaccelerator = "Ctrl<Key>O";
	XmNacceleratorText = "Ctrl+O";
    };
    callbacks open_cbs;
};

object saveButton: XmPushButton {
    arguments {
        XmNlabelString = saveString;
        XmNmnemonic = saveMnemonic; 
	XmNaccelerator = "Ctrl<Key>S";
	XmNacceleratorText = "Ctrl+S";
    };
    callbacks save_cbs;
};

object saveAsButton: XmPushButton {
    arguments {
        XmNlabelString = saveAsString;
        XmNmnemonic = saveAsMnemonic; 
    };
    callbacks saveAs_cbs;
};

object revertButton: XmPushButton {
    arguments {
        XmNlabelString = revertString;
    };
    callbacks revert_cbs;
};

object copyToButton: XmPushButton {
    arguments {
        XmNlabelString = copyToString;
    };
    callbacks copyTo_cbs;
};

object moveToButton: XmPushButton {
    arguments {
        XmNlabelString = moveToString;
    };
    callbacks moveTo_cbs;
};

object linkToButton: XmPushButton {
    arguments {
        XmNlabelString = linkToString;
    };
    callbacks linkTo_cbs;
};

object dragButton: XmPushButton {
    arguments {
        XmNlabelString = dragString;
    };
    callbacks drag_cbs;
};

object printButton: XmPushButton {
    arguments {
        XmNlabelString = printString;
        XmNmnemonic = printMnemonic; 
    };
    callbacks print_cbs;
};

object printSetupButton: XmPushButton {
    arguments {
        XmNlabelString = printSetupString;
        XmNmnemonic = printSetupMnemonic; 
    };
    callbacks printSetup_cbs;
};

object closeButton: XmPushButton {
    arguments {
        XmNlabelString = closeString;
        XmNmnemonic = closeMnemonic;
    };
    callbacks close_cbs;
};

object exitButton: XmPushButton {
    arguments {
        XmNlabelString = exitString;
        XmNmnemonic = exitMnemonic;
    };
    callbacks exit_cbs;
};

object selectedMenu: XmPulldownMenu {
    controls {
    };
};

object editMenu: XmPulldownMenu {
    controls {
	XmPushButton undoButton;
	XmPushButton repeatRedoButton;
	unmanaged XmPushButton dragMoveButton;
	unmanaged XmPushButton sizeButton;
	unmanaged XmPushButton duplicateButton;
	XmSeparator  sep;
     XmPushButton cutButton;
     XmPushButton copyButton;
     unmanaged XmPushButton copyLinkButton;
     unmanaged XmPushButton copySpecialButton;
     XmPushButton pasteButton;
     unmanaged XmPushButton pasteLinkButton;
     unmanaged XmPushButton pasteSpecialButton;
     unmanaged XmPushButton insertButton;
     unmanaged XmSeparator sep;
	unmanaged XmPushButton primaryCopyButton;
	unmanaged XmPushButton primaryMoveButton;
	unmanaged XmPushButton primaryLinkButton;
     XmSeparator  sep;
	XmPushButton clearButton;
	XmPushButton deleteButton;
     XmSeparator  sep;
	XmPushButton selectAllButton;
	XmPushButton deselectAllButton;
	unmanaged XmPushButton selectPastedButton;
	unmanaged XmPushButton reselectButton;
    };
};

object undoButton: XmPushButton {
    arguments {
        XmNlabelString = undoString;
        XmNmnemonic = undoMnemonic;
    };
    callbacks undo_cbs;
};

object repeatRedoButton: XmPushButton {
    arguments {
        XmNlabelString = repeatRedoString;
        XmNmnemonic = repeatRedoMnemonic;
    };
    callbacks repeatRedo_cbs;
};

object dragMoveButton: XmPushButton {
    arguments {
        XmNlabelString = dragMoveString;
    };
    callbacks dragMove_cbs;
};

object sizeButton: XmPushButton {
    arguments {
        XmNlabelString = sizeString;
    };
    callbacks size_cbs;
};

object duplicateButton: XmPushButton {
    arguments {
        XmNlabelString = duplicateString;
    };
    callbacks duplicate_cbs;
};

object cutButton: XmPushButton {
    arguments {
        XmNlabelString = cutString;
        XmNmnemonic = cutMnemonic;
	XmNaccelerator = "Shift<Key>Del";
	XmNacceleratorText = "Shift+Del";
    };
    callbacks cut_cbs;
};

object copyButton: XmPushButton {
    arguments {
        XmNlabelString = copyString;
        XmNmnemonic = copyMnemonic;
	XmNaccelerator = "Ctrl<Key>Ins";
	XmNacceleratorText = "Ctrl+Ins";
    };
    callbacks copy_cbs;
};

object copyLinkButton: XmPushButton {
    arguments {
        XmNlabelString = copyLinkString;
        XmNmnemonic = copyLinkMnemonic;
    };
    callbacks copyLink_cbs;
};

object copySpecialButton: XmPushButton {
    arguments {
        XmNlabelString = copySpecialString;
    };
    callbacks copySpecial_cbs;
};

object pasteButton: XmPushButton {
    arguments {
        XmNlabelString = pasteString;
        XmNmnemonic = pasteMnemonic;
	XmNaccelerator = "Shift<Key>Ins";
	XmNacceleratorText = "Shift+Ins";
    };
    callbacks paste_cbs;
};

object pasteLinkButton: XmPushButton {
    arguments {
        XmNlabelString = pasteLinkString;
        XmNmnemonic = pasteLinkMnemonic;
    };
    callbacks pasteLink_cbs;
};

object pasteSpecialButton: XmPushButton {
    arguments {
        XmNlabelString = pasteSpecialString;
    };
    callbacks pasteSpecial_cbs;
};

object insertButton: XmPushButton {
    arguments {
        XmNlabelString = insertString;
        XmNmnemonic = insertMnemonic;
    };
    callbacks insert_cbs;
};

object primaryCopyButton: XmPushButton {
    arguments {
        XmNlabelString = primaryCopyString;
    };
    callbacks primaryCopy_cbs;
};

object primaryMoveButton: XmPushButton {
    arguments {
        XmNlabelString = primaryMoveString;
    };
    callbacks primaryMove_cbs;
};

object primaryLinkButton: XmPushButton {
    arguments {
        XmNlabelString = primaryLinkString;
    };
    callbacks primaryLink_cbs;
};

object clearButton: XmPushButton {
    arguments {
        XmNlabelString = clearString;
        XmNmnemonic = clearMnemonic;
    };
    callbacks clear_cbs;
};

object deleteButton: XmPushButton {
    arguments {
     XmNlabelString = deleteString;
     XmNmnemonic = deleteMnemonic;
	XmNaccelerator = "Del";
	XmNacceleratorText = "Del";
    };
    callbacks delete_cbs;
};

object selectAllButton: XmPushButton {
    arguments {
     XmNlabelString = selectAllString;
     XmNmnemonic = selectAllMnemonic;
	XmNaccelerator = "Ctrl<Key>A";
	XmNacceleratorText = "Ctrl+A";
    };
    callbacks selectAll_cbs;
};

object deselectAllButton: XmPushButton {
    arguments {
     XmNlabelString = deselectAllString;
	XmNaccelerator = "Ctrl<Key>\\";
	XmNacceleratorText = "Ctrl+\\";
    };
    callbacks deselectAll_cbs;
};

object selectPastedButton: XmPushButton {
    arguments {
        XmNlabelString = selectPastedString;
    };
    callbacks selectPasted_cbs;
};

object reselectButton: XmPushButton {
    arguments {
        XmNlabelString = reselectString;
    };
    callbacks reselect_cbs;
};

object viewMenu: XmPulldownMenu {
    controls {
	XmCascadeButton changeViewButton;
	XmPushButton newWindowButton;
     unmanaged XmSeparator  sep;
	unmanaged XmPushButton includeButton;
	unmanaged XmPushButton sortButton;
	unmanaged XmPushButton findButton;
    };
};

object changeViewButton: XmCascadeButton {
    arguments {
        XmNlabelString = changeViewString;
        XmNmnemonic = changeViewMnemonic;
    };
    callbacks changeView_cbs;
    controls changeView_controls;
};

object newWindowButton: XmPushButton {
    arguments {
        XmNlabelString = newWindowString;
        XmNmnemonic = newWindowMnemonic;
    };
    callbacks newWindow_cbs;
};

object includeButton: XmPushButton {
    arguments {
        XmNlabelString = includeString;
        XmNmnemonic = includeMnemonic;
    };
    callbacks include_cbs;
};

object sortButton: XmPushButton {
    arguments {
        XmNlabelString = sortString;
        XmNmnemonic = sortMnemonic;
    };
    callbacks sort_cbs;
};

object findButton: XmPushButton {
    arguments {
        XmNlabelString = findString;
        XmNmnemonic = findMnemonic;
    };
    callbacks find_cbs;
};

object helpMenu: XmPulldownMenu {
    controls {
	XmPushButton overviewButton;
     XmSeparator  sep;
	unmanaged XmPushButton indexButton;
	XmPushButton tocButton;
	XmPushButton tasksButton;
	XmPushButton referenceButton;
	unmanaged XmPushButton tutorialButton;
	unmanaged XmPushButton keyboardButton;
	unmanaged XmPushButton mouseButton;
     XmSeparator  sep;
	XmPushButton onItemButton;
	XmPushButton usingHelpButton;
	XmPushButton aboutButton;
	};
};

object overviewButton: XmPushButton {
    arguments {
        XmNlabelString = overviewString;
        XmNmnemonic = overviewMnemonic;
    };
    callbacks overview_cbs;
};

object indexButton: XmPushButton {
    arguments {
        XmNlabelString = indexString;
        XmNmnemonic = indexMnemonic;
    };
    callbacks index_cbs;
};

object tocButton: XmPushButton {
    arguments {
        XmNlabelString = tocString;
        XmNmnemonic = tocMnemonic;
    };
    callbacks toc_cbs;
};

object tasksButton: XmPushButton {
    arguments {
        XmNlabelString = tasksString;
        XmNmnemonic = tasksMnemonic;
    };
    callbacks tasks_cbs;
};

object referenceButton: XmPushButton {
    arguments {
        XmNlabelString = referenceString;
        XmNmnemonic = referenceMnemonic;
    };
    callbacks reference_cbs;
};

object tutorialButton: XmPushButton {
    arguments {
        XmNlabelString = tutorialString;
        XmNmnemonic = tutorialMnemonic;
    };
    callbacks tutorial_cbs;
};

object keyboardButton: XmPushButton {
    arguments {
        XmNlabelString = keyboardString;
        XmNmnemonic = keyboardMnemonic;
    };
    callbacks keyboard_cbs;
};

object mouseButton: XmPushButton {
    arguments {
        XmNlabelString = mouseString;
        XmNmnemonic = mouseMnemonic;
    };
    callbacks mouse_cbs;
};

object onItemButton: XmPushButton {
    arguments {
        XmNlabelString = onItemString;
        XmNmnemonic = onItemMnemonic;
    };
    callbacks onItem_cbs;
};

object usingHelpButton: XmPushButton {
    arguments {
        XmNlabelString = usingHelpString;
        XmNmnemonic = usingHelpMnemonic;
    };
    callbacks usingHelp_cbs;
};

object aboutButton: XmPushButton {
    arguments {
        XmNlabelString = aboutString & appString;
        XmNmnemonic = aboutMnemonic;
    };
    callbacks about_cbs;
};

object sep: XmSeparator {
};




